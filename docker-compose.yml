services:
  web:
    build:
      context: .
    container_name: "web-task"
    command: python manage.py runserver 0.0.0.0:8004
    volumes:
      - .:/app
    ports:
      - "8004:8004"
    depends_on:
      - redis
      - db
    restart: always


  bot:
    build:
      context: .
    container_name: "bot-task"
    command: python main.py
    depends_on:
      - db
      - redis
    volumes:
      - .:/app
    restart: always
    env_file:
      - .env

  celery:
    build: .
    container_name: "celery-task"
    command: ["celery", "-A", "core", "worker", "--loglevel=info"]
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  celerybeat:
    build: .
    container_name: "celerybeat-task"
    command: ["/app/wait-for-it.sh", "db:5432", "--", "celery", "-A", "core", "beat", "--loglevel=info"]
    volumes:
      - .:/app
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy

  redis:
    image: "redis:latest"
    container_name: "redis-task"
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      retries: 3

  db:
    image: postgres
    container_name: "postgres-db-task"
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - "5432:5432"
    env_file:
      - .env

    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${DB_USER} -d $${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

volumes:
  db_data:
  static:
  media:
